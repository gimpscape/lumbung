<svg width="24" height="24" version="1.1" id="SVGRoot" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg"><script id="inkwebjs" type="text/javascript"><![CDATA[
/* inkweb.js - InkWebEffect:AutoUpdate */
/*
**  InkWeb - Inkscape's Javscript features for the open vector web
**
**  Copyright (C) 2009 Aurelio A. Heckert, aurium (a) gmail dot com
**
**  ********* Bugs and New Fetures *************************************
**   If you found any bug on this script or if you want to propose a
**   new feature, please report it in the inkscape bug tracker
**   https://inkscape.org/report .
**  ********************************************************************
**
**  This program is free software: you can redistribute it and/or modify
**  it under the terms of the GNU Lesser General Public License as published
**  by the Free Software Foundation, either version 3 of the License, or
**  (at your option) any later version.
**
**  This program is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
**  GNU Lesser General Public License for more details.
**
**  You should have received a copy of the GNU Lesser General Public License
**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

var InkWeb = {

  version: 0.04,

  NS: {
    svg:      "http://www.w3.org/2000/svg",
    sodipodi: "http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd",
    inkscape: "http://www.inkscape.org/namespaces/inkscape",
    cc:       "http://creativecommons.org/ns#",
    dc:       "http://purl.org/dc/elements/1.1/",
    rdf:      "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    xlink:    "http://www.w3.org/1999/xlink",
    xml:      "http://www.w3.org/XML/1998/namespace"
  }

};

InkWeb.el = function (tag, attributes) {
  // A helper to create SVG elements
  var element = document.createElementNS( this.NS.svg, tag );
  for ( var att in attributes ) {
    switch ( att ) {
      case "parent":
        attributes.parent.appendChild( element );
        break;
      case "text":
        element.appendChild( document.createTextNode( attributes.text ) );
        break;
      default:
        element.setAttribute( att, attributes[att] );
    }
  }
  return element;
}

InkWeb.reGetStyleAttVal = function (att) {
  return new RegExp( "(^|.*;)[ ]*"+ att +":([^;]*)(;.*|$)" )
}

InkWeb.getStyle = function (el, att) {
  // This method is needed because el.style is only working
  // to HTML style in the Firefox 3.0
  if ( typeof(el) == "string" )
    el = document.getElementById(el);
  var style = el.getAttribute("style");
  var match = this.reGetStyleAttVal(att).exec(style);
  if ( match ) {
    return match[2];
  } else {
    return false;
  }
}

InkWeb.setStyle = function (el, att, val) {
  if ( typeof(el) == "string" )
    el = document.getElementById(el);
  var style = el.getAttribute("style");
  re = this.reGetStyleAttVal(att);
  if ( re.test(style) ) {
    style = style.replace( re, "$1"+ att +":"+ val +"$3" );
  } else {
    style += ";"+ att +":"+ val;
  }
  el.setAttribute( "style", style );
  return val
}

InkWeb.transmitAtt = function (conf) {
  conf.att = conf.att.split( /\s+/ );
  if ( typeof(conf.from) == "string" )
    conf.from = document.getElementById( conf.from );
  if ( ! conf.to.join )
    conf.to = [ conf.to ];
  for ( var toEl,elN=0; toEl=conf.to[elN]; elN++ ) {
    if ( typeof(toEl) == "string" )
      toEl = document.getElementById( toEl );
    for ( var i=0; i<conf.att.length; i++ ) {
      var val = this.getStyle( conf.from, conf.att[i] );
      if ( val ) {
        this.setStyle( toEl, conf.att[i], val );
      } else {
        val = conf.from.getAttribute(conf.att[i]);
        toEl.setAttribute( conf.att[i], val );
      }
    }
  }
}

InkWeb.goto = function (conf) {
  if ( typeof(conf.from) == "string" )
    conf.from = document.getElementById( conf.from );
  if ( ! conf.to )
    conf.to = conf.to ;
  if ( typeof(toEl) == "string" )
      toEl = document.getElementById( toEl );
  toEl = document.getElementById( conf.to );
  document.getElementsByTagName("svg")[0].viewBox.baseVal.x = toEl.getAttribute("x");
  document.getElementsByTagName("svg")[0].viewBox.baseVal.y = toEl.getAttribute("y");
}

InkWeb.setAtt = function (conf) {
  if ( ! conf.el.join )
    conf.to = [ conf.el ];
  conf.att = conf.att.split( /\s+/ );
  conf.val = conf.val.split( /\s+/ );
  for ( var el,elN=0; el=conf.el[elN]; elN++ ) {
    if ( typeof(el) == "string" )
      el = document.getElementById( el );
    for ( var att,i=0; att=conf.att[i]; i++ ) {
      if (
           att == "width"  ||
           att == "height" ||
           att == "x"  ||
           att == "y"  ||
           att == "cx" ||
           att == "cy" ||
           att == "r"  ||
           att == "rx" ||
           att == "ry" ||
           att == "transform"
         ) {
        el.setAttribute( att, conf.val[i] );
      } else {
        this.setStyle( el, att, conf.val[i] );
      }
    }
  }
}

InkWeb.moveElTo = function (startConf) {
  if ( typeof(startConf) == "string" ) {
    // startConf may be only a element Id, to timeout recursive calls.
    var el = document.getElementById( startConf );
  } else {
    if ( typeof(startConf.el) == "string" )
      startConf.el = document.getElementById( startConf.el );
    var el = startConf.el;
  }
  if ( ! el.inkWebMoving ) {
    el.inkWebMoving = {
      step: 0
    };
  }
  var conf = el.inkWebMoving;
  if ( conf.step == 0 ) {
    conf.x = startConf.x;
    conf.y = startConf.y;
    // dur : duration of the animation in seconds
    if ( startConf.dur ) { conf.dur = startConf.dur }
    else { conf.dur = 1 }
    // steps : animation steps in a second
    if ( startConf.stepsBySec ) { conf.stepsBySec = startConf.stepsBySec }
    else { conf.stepsBySec = 16 }
    conf.sleep = Math.round( 1000 / conf.stepsBySec );
    conf.steps = conf.dur * conf.stepsBySec;
    var startPos = el.getBBox();
    conf.xInc = ( conf.x - startPos.x ) / conf.steps;
    conf.yInc = ( conf.y - startPos.y ) / conf.steps;
    conf.transform = el.transform.baseVal.consolidate();
    if ( ! conf.transform ) {
      conf.transform = el.ownerSVGElement.createSVGTransform();
    }
    el.transform.baseVal.clear();
    el.transform.baseVal.appendItem(conf.transform);
  }
  if ( conf.step < conf.steps ) {
    conf.step++;
    conf.transform.matrix.e += conf.xInc;
    conf.transform.matrix.f += conf.yInc;
    try{ el.ownerSVGElement.forceRedraw() }
    catch(e){ this.log(e, "this "+el.ownerSVGElement+" has no forceRedraw().") }
    conf.timeout = setTimeout( 'InkWeb.moveElTo("'+el.id+'")', conf.sleep );
  } else {
    delete el.inkWebMoving;
  }
}

InkWeb.moveViewbox = function (conf) {
  if ( typeof(conf.from) == "string" )
    conf.from = document.getElementById( conf.from );
  if ( ! conf.to )
    conf.to = conf.to ;
  if ( typeof(toEl) == "string" )
      toEl = document.getElementById( toEl );
  toEl = document.getElementById( conf.to );
  document.getElementsByTagName("svg")[0].viewBox.baseVal.x = toEl.getAttribute("x");
  document.getElementsByTagName("svg")[0].viewBox.baseVal.y = toEl.getAttribute("y");
}

InkWeb.log = function () { /* requires inkweb-debug.js, not included in Inkscape */ }
]]></script><defs id="defs1329"><linearGradient id="linearGradient169797"><stop offset="0" id="stop169793" stop-color="#fff" stop-opacity="1"/><stop offset="1" id="stop169795" stop-color="#fff" stop-opacity="0"/></linearGradient><linearGradient xlink:href="#linearGradient169797" id="linearGradient172653" gradientUnits="userSpaceOnUse" x1="676.276" y1="175.723" x2="751.601" y2="251.048"/><clipPath clipPathUnits="userSpaceOnUse" id="clipPath170395"><rect id="rect170397" width="101.718" height="82.841" x="662.002" y="177.703" rx="4.145" ry="4.145" opacity="1" fill="#fff" fill-opacity=".409" stroke="none" stroke-width=".92" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="4" stroke-dasharray="none" stroke-dashoffset="0" stroke-opacity="1" stop-color="#000" stop-opacity="1"/></clipPath><clipPath clipPathUnits="userSpaceOnUse" id="clipPath172649"><rect id="rect172651" width="101.718" height="82.841" x="662.002" y="177.703" rx="4.145" ry="4.145" clip-path="url(#clipPath170395)" transform="translate(130.148 31.132) scale(.8286)" opacity=".273" fill="url(#linearGradient172653)" fill-opacity="1" stroke="none" stroke-width=".92" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="4" stroke-dasharray="none" stroke-dashoffset="0" stroke-opacity="1" filter="url(#filter169219)" stop-color="#000" stop-opacity="1"/></clipPath><filter id="filter169219" x="-.067" y="-.083" width="1.135" height="1.165" color-interpolation-filters="sRGB"><feGaussianBlur stdDeviation="2.85" id="feGaussianBlur169221"/></filter></defs><g id="layer1" transform="translate(-131.545 -181.102)"><g id="img-license" fill-opacity="1"><rect style="-inkscape-stroke:none" id="rect22833" width="24" height="24" x="131.545" y="181.102" rx=".574" ry="0" fill="none" stroke-width="1.135" stroke-linecap="round" stroke-linejoin="round" paint-order="markers fill stroke" stop-color="#000"/><path id="path1519" style="-inkscape-stroke:none" d="M143.545 182.102a11 11 0 00-11 11 11 11 0 0011 11 11 11 0 0011-11 11 11 0 00-11-11zm-4.362 6.974c.938 0 1.742.248 2.41.743.669.496 1.115 1.17 1.34 2.026h-2.117a1.697 1.697 0 00-.675-.753 1.857 1.857 0 00-.981-.26c-.593 0-1.074.207-1.442.62-.368.413-.552.964-.552 1.655 0 .69.184 1.243.552 1.656.368.413.849.62 1.442.62.368 0 .695-.087.98-.26.293-.173.519-.423.676-.754h2.117c-.225.856-.671 1.531-1.34 2.027-.668.488-1.472.732-2.41.732-.766 0-1.454-.169-2.062-.507a3.68 3.68 0 01-1.407-1.43c-.337-.609-.507-1.303-.507-2.084 0-.781.17-1.475.507-2.083a3.583 3.583 0 011.407-1.43c.608-.346 1.296-.518 2.062-.518zm8.948 0c.939 0 1.743.248 2.411.743.669.496 1.116 1.17 1.34 2.026h-2.117a1.697 1.697 0 00-.676-.753 1.857 1.857 0 00-.98-.26c-.593 0-1.073.207-1.44.62-.369.413-.553.964-.553 1.655 0 .69.184 1.243.552 1.656.368.413.848.62 1.44.62.369 0 .696-.087.981-.26.293-.173.518-.423.676-.754h2.118c-.225.856-.672 1.531-1.34 2.027-.669.488-1.473.732-2.412.732-.766 0-1.452-.169-2.06-.507a3.684 3.684 0 01-1.408-1.43c-.338-.609-.506-1.303-.506-2.084 0-.781.168-1.475.506-2.083a3.586 3.586 0 011.408-1.43c.608-.346 1.294-.518 2.06-.518z" fill="#0a5cd9" stroke-width=".128" stop-color="#000"/></g></g></svg>